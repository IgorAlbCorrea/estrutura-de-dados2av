/* Dada uma lista sequencial ordenada L1, escreva métodos em C que:
a. Verifique se L1 está ordenada ou não (a ordem pode ser crescente ou
decrescente)*/ 

#include <stdio.h>
#include <stdlib.h>

typedef struct lista{
	int info;
	struct lista *prox;
}Lista;

Lista* cria(){
	return NULL;
}

Lista* insere(Lista *ref, int valor){
	Lista *novo = (Lista*)malloc(sizeof(Lista));
	novo->info=valor;
	novo->prox=ref;
	return novo;
}

void imprime (Lista *ref){
	Lista *p;
	for(p=ref;p!=NULL;p=p->prox){
		printf("%d ",p->info);
	}
}

int ordemCresc(Lista *ref){ //Retorna se a lista está em ordem crescente
	
    if (ref != NULL)
    {
        while (ref->prox != NULL)
        {
            if (ref->info > ref->prox->info){
            	return 0;
			}
            ref = ref->prox;
        }
    }
    return 1;
}

int ordemDecresc(Lista *ref){ //Retorna se a lista está em ordem crescente
	
    if (ref != NULL)
    {
        while (ref->prox != NULL)
        {
            if (ref->info < ref->prox->info){
            	return 0;
			}
            ref = ref->prox;
        }
    }
    return 1;
}
int main(){
	Lista *ref;
	ref=cria();
	ref=insere(ref,3);
	ref=insere(ref,4);
	ref=insere(ref,5);
	ref=insere(ref,6);
	imprime(ref);
	
	if(ordemCresc(ref)==0){
		printf("\nLista nao esta em ordem crescente\n");
	}else{
		printf("\nLista em ordem crescente\n");
	}
	
	if(ordemDecresc(ref)==0){
		printf("\nLista nao esta ordem decrescente\n");
	}else{
		printf("\nLista em ordem decrescente\n");
	}
	return 0;
}

    } else {
        printf("Fila Vazia\n");
        return;
    }


}

int main(void) {
    Lista *fila1 = (Lista *)malloc(sizeof(Lista));
    Lista *fila2 = (Lista *)malloc(sizeof(Lista));
    Lista *fila3 = (Lista *)malloc(sizeof(Lista));
    if (fila1 == NULL || fila2 == NULL || fila3 == NULL) {
        printf("Erro de alocação");
        exit(-1);
    } else {
        inicializaFila(fila1);
        inicializaFila(fila2);
        inicializaFila(fila3);
        enfileira(10, fila1);
        enfileira(20, fila1);
        enfileira(30, fila1);
        enfileira(40, fila1);
        enfileira(55, fila1);
        enfileira(32, fila1);
        enfileira(45, fila1);
        enfileira(9, fila1);


        divFila(qtdItems(fila1) / 2, fila1, fila2, fila3);
        imprimeFile(fila2);
        imprimeFile(fila3);
    }
}
